xt("", textToRender, true, disassembler, disassembler.Initialize(textToRender, BurstDisassembler.AsmKind.Intel, true, coloured));
            _textArea.ExpandAllBlocks();

            var builder = new StringBuilder();

            for (int i = 0; i < disassembler.Blocks.Count; i++)
            {
                builder.Append(disassembler.GetOrRenderBlockToText(i));
            }

            textToRender = builder.ToString();
        }
        else
        {
            _textArea.SetText("", textToRender, true, null, false);
        }

        _textArea.Layout(GUIStyle.none, _textArea.horizontalPad);

        _textArea.SelectAll();
        _textArea.DoSelectionCopy();

        Assert.AreEqual(textToRender, EditorGUIUtility.systemCopyBuffer);
    }

    [Test]
    public void CopyAllTextWithoutColorTagsTest()
    {
        // Setup:
        var disassembler = new BurstDisassembler();
        var thisPath = Path.GetDirectoryName(GetThisFilePath());
        var textToRender = File.ReadAllText(Path.Combine(thisPath, _burstJobPath));

        _textArea.SetText("", textToRender, true, disassembler,
            disassembler.Initialize(
                textToRender,
                BurstDisassembler.AsmKind.Intel));

        _textArea.Layout(GUIStyle.none, _textArea.horizontalPad);
        _textArea.LayoutEnhanced(GUIStyle.none, Rect.zero, true);

        // Actual test to reproduce error:
        _textArea.ChangeCopyMode();
        _textArea.SelectAll();
        Assert.DoesNotThrow(_textArea.DoSelectionCopy);
    }

    [Test]
    public void CopyTextAfterSelectionMovedTest()
    {
        // Setup:
        const bool sbm = true;
        var wa = Rect.zero;

        var disassembler = new BurstDisassembler();
        var thisPath = Path.GetDirectoryName(GetThisFilePath());
        var textToRender = File.ReadAllText(Path.Combine(thisPath, _burstJobPath));

        _textArea.SetText("", textToRender, true, disassembler,
            disassembler.Initialize(
                textToRender,
                BurstDisassembler.AsmKind.Intel));

        _textArea.Layout(GUIStyle.none, _textArea.horizontalPad);
        _textArea.LayoutEnhanced(GUIStyle.none, Rect.zero, sbm);

        // Actual test to reproduce error:
        _textArea.ChangeCopyMode();

        _textArea.MoveSelectionDown(wa, sbm);
        _textArea.MoveSelectionDown(wa, sbm);
        _textArea.MoveSelectionLeft(wa, sbm);

        Assert.DoesNotThrow(_textArea.DoSelectionCopy);

        _textArea.MoveSelectionRight(wa, sbm);
        Assert.DoesNotThrow(_textArea.DoSelectionCopy);
    }

    [Test]
    public void CopyTextIdenticalWithAndWithoutColorTags()
    {
        // We don't wanna go messing with the users system buffer. At least if user didn't break anything.
        var savedSystemBuffer = EditorGUIUtility.systemCopyBuffer;

        // Get target job assembly:
        var disassembler = new BurstDisassembler();
        var thisPath = Path.GetDirectoryName(GetThisFilePath());
        var textToRender = File.ReadAllText(Path.Combine(thisPath, _burstJobPath));

        _textArea.SetText("", textToRender, true, disassembler,
            disassembler.Initialize(
                textToRender,
                BurstDisassembler.AsmKind.Intel));

        _textArea.Layout(GUIStyle.none, _textArea.horizontalPad);
        _textArea.LayoutEnhanced(GUIStyle.none, Rect.zero, true);
        for (var i=0; i<disassembler.Blocks[0].Length+50; i++) _textArea.MoveSelectionDown(Rect.zero, true);

        _textArea.LayoutEnhanced(GUIStyle.none, Rect.zero, true);
        _textArea.UpdateEnhancedSelectTextIdx(_textArea.horizontalPad);

        _textArea.DoSelectionCopy();
        var copiedText1 = EditorGUIUtility.systemCopyBuffer;

        _textArea.ChangeCopyMode();
        _textArea.DoSelectionCopy();
        var copiedText2 = EditorGUIUtility.systemCopyBuffer;

        var regx = new Regex(@"(<color=#[0-9A-Za-z]*>)|(</color>)");

        if (!_textArea.CopyColorTags)
        {
            (copiedText1, copiedText2) = (copiedText2, copiedText1);
        }
        copiedText2 = regx.Replace(copiedText2, "");

        EditorGUIUtility.systemCopyBuffer = savedSystemBuffer;
        Assert.AreEqual(copiedText1, copiedText2,
            "Copy with color tags did not match copy without " +
            "(Color tags is removed from the copy to make it comparable with the color-tag-less copy).");
    }

    // Disabled due to https://jira.unity3d.com/browse/BUR-2207
    [Test]
    [TestCase(true)]
    [TestCase(false)]
    public void KeepingSelectionWhenMovingTest(bool useDisassembler)
    {
        const string jobName = "BurstInspectorGUITests.MyJob - (IJob)";
        BurstDisassembler disassembler = new BurstDisassembler();
        var thisPath = Path.GetDirectoryName(GetThisFilePath());
        var textToRender = File.ReadAllText(Path.Combine(thisPath, _burstJobPath));
        Rect workingArea = new Rect();

        if (useDisassembler)
        {
            _textArea.SetText(jobName, textToRender, true, disassembler, disassembler.Initialize(textToRender, BurstDisassembler.AsmKind.Intel));
            _textArea.LayoutEnhanced(GUIStyle.none, workingArea, true);
        }
        else
        {
            _textArea.SetText(jobName, textToRender, false, null, false);
        }
        _textArea.Layout(GUIStyle.none, _textArea.horizontalPad);

        Assert.IsFalse(_textArea.HasSelection);

        Vector2 start = _textArea.selectDragPos;
        if (useDisassembler) start.x = _textArea.horizontalPad + _textArea.fontWidth / 2;

        // Horizontal movement:
        _textArea.MoveSelectionRight(workingArea, true);
        Assert.IsTrue(_textArea.HasSelection);
        Assert.AreEqual(start + new Vector2(_textArea.fontWidth, 0), _textArea.selectDragPos);

        _textArea.MoveSelectionLeft(workingArea, true);
        Assert.IsTrue(_textArea.HasSelection);
        Assert.AreEqual(start, _textArea.selectDragPos);

        // Vertical movement:
        _textArea.MoveSelectionDown(workingArea, true);
        Assert.IsTrue(_textArea.HasSelection);
        Assert.AreEqual(start + new Vector2(0, _textArea.fontHeight), _textArea.selectDragPos);

        _textArea.MoveSelectionUp(workingArea, true);
        Assert.IsTrue(_textArea.HasSelection);
        Assert.AreEqual(start, _textArea.selectDragPos);
    }

    [Test]
    public void GetFragNrFromBlockIdxTest()
    {
        var disassembler = new BurstDisassembler();
        var thisPath = Path.GetDirectoryName(GetThisFilePath());
        var textToRender = File.ReadAllText(Path.Combine(thisPath, _burstJobPath));

        _textArea.SetText("", textToRender, true, disassembler,
            disassembler.Initialize(textToRender, BurstDisassembler.AsmKind.Intel, false, false));


        var garbageVariable = 0f;
        var numBlocks = disassembler.Blocks.Count;

        // Want to get the last fragment possible
        var expectedFragNr = 0;
        for (var i = 0; i < _textArea.blocksFragmentsPlain.Length-1; i++)
        {
            expectedFragNr += _textArea.GetPlainFragments(i).Count;
        }

        Assert.AreEqual(expectedFragNr, _textArea.GetFragNrFromBlockIdx(numBlocks-1, 0, 0, ref garbageVariable));

        Assert.AreEqual(3, _textArea.GetFragNrFromBlockIdx(3, 1, 1, ref garbageVariable));
    }

    [Test]
    public void GetFragNrFromEnhancedTextIdxTest()
    {
        const string jobName = "BurstJobTester2.MyJob - (IJob)";

        var disassembler = new BurstDisassembler();
        var thisPath = Path.GetDirectoryName(GetThisFilePath());
        var textToRender = File.ReadAllText(Path.Combine(thisPath, _burstJobPath));
        _textArea.SetText(jobName, textToRender, true, disassembler,
            disassembler.Initialize(textToRender, BurstDisassembler.AsmKind.Intel, false, false));

        var garbageVariable = 0f;
        const int blockIdx = 2;

        var fragments = _textArea.RecomputeFragmentsFromBlock(blockIdx);
        var text = _textArea.GetText;
        var expectedFrag = blockIdx + fragments.Count - 1;

        var info = disassembler.BlockIdxs[blockIdx];

        var extraFragLen = fragments.Count > 1
            ? fragments[0].text.Length + 1 // job only contains 2 fragments at max
            : 0;

        var idx = info.startIdx + extraFragLen + 1;

        var expected = (expectedFrag, info.startIdx + extraFragLen);
        var actual = _textArea.GetFragNrFromEnhancedTextIdx(idx, 0, 0, 0, ref garbageVariable);

        Assert.AreEqual(expected, actual);
    }

    [Test]
    [TestCase(true)]
    [TestCase(false)]
    public void SearchTextEnhancedTest(bool colored)
    {
        var disassembler = new BurstDisassembler();
        var thisPath = Path.GetDirectoryName(GetThisFilePath());
        var textToRender = File.ReadAllText(Path.Combine(thisPath, _burstJobPath));
        _textArea.SetText("", textToRender, true, disassembler, disassembler.Initialize(textToRender, BurstDisassembler.AsmKind.Intel, true, colored));

        var workingArea = new Rect(0, 0, 10, 10);
        _textArea.SearchText(new SearchCriteria(".Ltmp.:", true, false, true), new Regex(@"\.Ltmp.:"), ref workingArea);

        Assert.AreEqual(10, _textArea.NrSearchHits);

        // Check that they are filled out probably
        int nr = 0;
        foreach (var fragHits in _textArea.searchHits.Values)
        {
            foreach (var hit in fragHits)
            {
                Assert.AreEqual((0, 7, nr++), hit);
            }
        }
    }

    [Test]
    public void SelectOnOneLineTest()
    {
        const string testCase = "\n<color=#d4d4d4>.Ltmp12</color>: ...";

        var disassembler = new BurstDisassembler();
        _textArea.SetText("", testCase, false, disassembler, disassembler.Initialize(testCase, BurstDisassembler.AsmKind.Intel));

        // Set fontWidth and fontHeight
        _textArea.Layout(GUIStyle.none, 20f);

        // Set selection markers.
        // Error happened when selection started at the lowest point of a line.
        _textArea.selectPos = new Vector2(0, _textArea.fontHeight);
        // Select further down to make sure it wont be switched with selectPos.
        _textArea.selectDragPos = new Vector2(10 * _textArea.fontWidth, _textArea.fontHeight*2);

        // Hopefully it wont throw anything
        Assert.DoesNotThrow(() =>
            _textArea.PrepareInfoForSelection(0, 0, _textArea.fontHeight,
                new LongTextArea.Fragment() { text = testCase.TrimStart('\n'), lineCount = 1 },
                _textArea.GetEndIndexOfColoredLine));
    }

    [Test]
    public void GetLineHighlightTest()
    {
        const float hPad = 20f;
        const int linePressed = 4 + 13;
        // Get target job assembly:
        var disassembler = new BurstDisassembler();
        var thisPath = Path.GetDirectoryName(GetThisFilePath());
        var textToRender = File.ReadAllText(Path.Combine(thisPath, _burstJobPath));

        // Set up dependencies for GetLineHighlight(.)
        _textArea.SetText("", textToRender, true, disassembler,
            disassembler.Initialize(
                textToRender,
                BurstDisassembler.AsmKind.Intel)
        );

        _textArea.Layout(GUIStyle.none, hPad);
        _textArea.LayoutEnhanced(GUIStyle.none,
            new Rect(0,0, _textArea.fontWidth*50,_textArea.fontHeight*50),
            false
        );

        // Setup simple cache.
        var cache = new LongTextArea.LineRegRectsCache();
        var rect = _textArea.GetLineHighlight(ref cache, hPad, linePressed);
        Assert.IsFalse(cache.IsRegistersCached(linePressed));
        Assert.IsTrue(cache.IsLineHighlightCached(linePressed, false));

        var expectedX = hPad;
        var b = 0;
        for (; b < disassembler.Blocks.Count; b++)
        {
            if (disassembler.Blocks[b].LineIndex > linePressed)
            {
                b--;
                break;
            }
        }

        var expectedY = (_textArea.blockLine[b] + (linePressed - disassembler.Blocks[b].LineIndex)) * _textArea.fontHeight + _textArea.fontHeight;
        var lineStr = _textArea.GetLineString(disassembler.Lines[linePressed]);
        var lineLen = lineStr.Length * _textArea.fontWidth;

        var expected = new Rect(expectedX,
            expectedY,
            lineLen,
            2f
        );

        var result = Mathf.Approximately(expectedX, rect.x)
                     && Mathf.Approximately(expectedY, rect.y)
                     && Mathf.Approximately(lineLen, rect.width)
                     && Mathf.Approximately(2f, rect.height);

        Assert.IsTrue(result, $"line highlight for \"{lineStr}\" was wrong.\nExpected: {expected}\nBut was: {rect}");
    }


    [Test]
    public void GetRegRectsTest()
    {
        #region Initialize-test-states
        const float hPad = 20f;
        const int linePressed = 8 + 13;
        // Get target job assembly:
        var disassembler = new BurstDisassembler();
        var thisPath = Path.GetDirectoryName(GetThisFilePath());
        var textToRender = File.ReadAllText(Path.Combine(thisPath, _burstJobPath));

        // Set up dependencies for GetLineHighlight(.)
        _textArea.SetText("", textToRender, true, disassembler,
            disassembler.Initialize(
                textToRender,
                BurstDisassembler.AsmKind.Intel)
        );
        // Setting up variables to determine view size:
        _textArea.Layout(GUIStyle.none, hPad);
        _textArea.LayoutEnhanced(GUIStyle.none, Rect.zero, false);
        #endregion

        // Find the block index to put within view:
        var blockIdx = disassembler.Blocks.Count/2;
        for (; blockIdx > 0; blockIdx--)
        {
            //