ns which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */
  FunctionNode.prototype._compile = function (math, argNames) {
    if (!(this instanceof FunctionNode)) {
      throw new TypeError('No valid FunctionNode')
    }

    // compile arguments
    const evalArgs = map(this.args, function (arg) {
      return arg._compile(math, argNames)
    })

    if (type.isSymbolNode(this.fn)) {
      // we can statically determine whether the function has an rawArgs property
      const name = this.fn.name
      const fn = name in math ? getSafeProperty(math, name) : undefined
      const isRaw = (typeof fn === 'function') && (fn.rawArgs === true)

      if (isRaw) {
        // pass unevaluated parameters (nodes) to the function
        // "raw" evaluation
        const rawArgs = this.args
        return function evalFunctionNode (scope, args, context) {
          return (name in scope ? getSafeProperty(scope, name) : fn)(rawArgs, math, Object.assign({}, scope, args))
        }
      } else {
        // "regular" evaluation
        if (evalArgs.length === 1) {
          const evalArg0 = evalArgs[0]
          return function evalFunctionNode (scope, args, context) {
            return (name in scope ? getSafeProperty(scope, name) : fn)(evalArg0(scope, args, context))
          }
        } else if (evalArgs.length === 2) {
          const evalArg0 = evalArgs[0]
          const evalArg1 = evalArgs[1]
          return function evalFunctionNode (scope, args, context) {
            return (name in scope ? getSafeProperty(scope, name) : fn)(evalArg0(scope, args, context), evalArg1(scope, args, context))
          }
        } else {
          return function evalFunctionNode (scope, args, context) {
            return (name in scope ? getSafeProperty(scope, name) : fn).apply(null, map(evalArgs, function (evalArg) {
              return evalArg(scope, args, context)
            }))
          }
        }
      }
    } else if (type.isAccessorNode(this.fn) &&
        type.isIndexNode(this.fn.index) && this.fn.index.isObjectProperty()) {
      // execute the function with the right context: the object of the AccessorNode

      const evalObject = this.fn.object._compile(math, argNames)
      const prop = this.fn.index.getObjectProperty()
      const rawArgs = this.args

      return function evalFunctionNode (scope, args, context) {
        const object = evalObject(scope, args, context)
        validateSafeMethod(object, prop)
        const isRaw = object[prop] && object[prop].rawArgs

        return isRaw
          ? object[prop](rawArgs, math, Object.assign({}, scope, args)) // "raw" evaluation
          : object[prop].apply(object, map(evalArgs, function (evalArg) { // "regular" evaluation
            return evalArg(scope, args, context)
          }))
      }
    } else { // node.fn.isAccessorNode && !node.fn.index.isObjectProperty()
      // we have to dynamically determine whether the function has a rawArgs property
      const evalFn = this.fn._compile(math, argNames)
      const rawArgs = this.args

      return function evalFunctionNode (scope, args, context) {
        const fn = evalFn(scope, args, context)
        const isRaw = fn && fn.rawArgs

        return isRaw
          ? fn(rawArgs, math, Object.assign({}, scope, args)) // "raw" evaluation
          : fn.apply(fn, map(evalArgs, function (evalArg) { // "regular" evaluation
            return evalArg(scope, args, context)
          }