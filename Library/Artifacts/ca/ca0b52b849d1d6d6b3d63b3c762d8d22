Info objects via reflection. If <paramref name="binder" /> is null, the default binder is used. </param>
      <param name="args">An array of type Object containing the arguments to be passed to the constructor. This array of arguments must match in number, order, and type the parameters of the constructor to be invoked. If the default constructor is desired, <paramref name="args" /> must be an empty array or null. </param>
      <param name="culture">An instance of CultureInfo used to govern the coercion of types. If this is null, the CultureInfo for the current thread is used. (This is necessary to convert a String that represents 1000 to a Double value, for example, since 1000 is represented differently by different cultures.) </param>
      <param name="activationAttributes">An array of one or more attributes that can participate in activation. Typically, an array that contains a single <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> object. The <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> specifies the URL that is required to activate a remote object. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeName" /> is an empty string ("") or a string beginning with a null character. -or-The current assembly was loaded into the reflection-only context.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> is null. </exception>
      <exception cref="T:System.MissingMethodException">No matching constructor was found. </exception>
      <exception cref="T:System.NotSupportedException">A non-empty activation attributes array is passed to a type that does not inherit from <see cref="T:System.MarshalByRefObject" />. </exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="typeName" /> requires a dependent assembly that could not be found. </exception>
      <exception cref="T:System.IO.FileLoadException">
        <paramref name="typeName" /> requires a dependent assembly that was found but could not be loaded.-or-The current assembly was loaded into the reflection-only context, and <paramref name="typeName" /> requires a dependent assembly that was not preloaded. </exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="typeName" /> requires a dependent assembly, but the file is not a valid assembly. -or-<paramref name="typeName" /> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess" />
      </PermissionSet>
    </member>
    <member name="M:System.Reflection.Assembly.CreateQualifiedName(System.String,System.String)">
      <summary>Creates the name of a type qualified by the display name of its assembly.</summary>
      <returns>A String that is the full name of the type qualified by the display name of the assembly.</returns>
      <param name="assemblyName">The display name of an assembly. </param>
      <param name="typeName">The full name of a type. </param>
    </member>
    <member name="P:System.Reflection.Assembly.EntryPoint">
      <summary>Gets the entry point of this assembly.</summary>
      <returns>A <see cref="T:System.Reflection.MethodInfo" /> object that represents the entry point of this assembly. If no entry point is found (for example, the assembly is a DLL), null is returned.</returns>
    </member>
    <member name="P:System.Reflection.Assembly.EscapedCodeBase">
      <summary>Gets the URI, including escape characters, that represents the codebase.</summary>
      <returns>A URI with escape characters.</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Reflection.Assembly.Evidence">
      <summary>Gets the evidence for this assembly.</summary>
      <returns>An Evidence object for this assembly.</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Reflection.Assembly.FullName">
      <summary>Gets the display name of the assembly.</summary>
      <returns>The display name of the assembly.</returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetAssembly(System.Type)">
      <summary>Gets the currently loaded assembly in which the specified class is defined.</summary>
      <returns>The assembly in which the specified class is defined.</returns>
      <param name="type">A <see cref="T:System.Type" /> object representing a class in the assembly that will be returned. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null. </exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetCallingAssembly">
      <summary>Returns the <see cref="T:System.Reflection.Assembly" /> of the method that invoked the currently executing method.</summary>
      <returns>The Assembly object of the method that invoked the currently executing method.</returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetCustomAttributes(System.Boolean)">
      <summary>Gets all the custom attributes for this assembly.</summary>
      <returns>An array of type Object containing the custom attributes for this assembly.</returns>
      <param name="inherit">This argument is ignored for objects of type <see cref="T:System.Reflection.Assembly" />. </param>
    </member>
    <member name="M:System.Reflection.Assembly.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Gets the custom attributes for this assembly as specified by type.</summary>
      <returns>An array of type Object containing the custom attributes for this assembly as specified by <paramref name="attributeType" />.</returns>
      <param name="attributeType">The <see cref="T:System.Type" /> for which the custom attributes are to be returned. </param>
      <param name="inherit">This argument is ignored for objects of type <see cref="T:System.Reflection.Assembly" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not a runtime type. </exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetEntryAssembly">
      <summary>Gets the process executable in the default application domain. In other application domains, this is the first executable that was executed by <see cref="M:System.AppDomain.ExecuteAssembly(System.String)" />.</summary>
      <returns>The Assembly that is the process executable in the default application domain, or the first executable that was executed by <see cref="M:System.AppDomain.ExecuteAssembly(System.String)" />. Can return null when called from unmanaged code.</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Reflection.Assembly.GetExecutingAssembly">
      <summary>Gets the assembly that contains the code that is currently executing.</summary>
      <returns>A <see cref="T:System.Reflection.Assembly" /> representing the assembly that contains the code that is currently executing. </returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetExportedTypes">
      <summary>Gets the public types defined in this assembly that are visible outside the assembly.</summary>
      <returns>An array of Type objects that represent the types defined in this assembly that are visible outside the assembly.</returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetFile(System.String)">
      <summary>Gets a <see cref="T:System.IO.FileStream" /> for the specified file in the file table of the manifest of this assembly.</summary>
      <returns>A <see cref="T:System.IO.FileStream" /> for the specified file, or null if the file is not found.</returns>
      <param name="name">The name of the specified file. Do not include the path to the file.</param>
      <exception cref="T:System.IO.FileLoadException">A file that was found could not be loaded. </exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null. </exception>
      <exception cref="T:System.ArgumentException">The <paramref name="name" /> parameter is an empty string (""). </exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="name" /> was not found. </exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="name" /> is not a valid assembly. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Reflection.Assembly.GetFiles">
      <summary>Gets the files in the file table of an assembly manifest.</summary>
      <returns>An array of <see cref="T:System.IO.FileStream" /> objects.</returns>
      <exception cref="T:System.IO.FileLoadException">A file that was found could not be loaded. </exception>
      <exception cref="T:System.IO.FileNotFoundException">A file was not found. </exception>
      <exception cref="T:System.BadImageFormatException">A file was not a valid assembly. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Reflection.Assembly.GetFiles(System.Boolean)">
      <summary>Gets the files in the file table of an assembly manifest, specifying whether to include resource modules.</summary>
      <returns>An array of <see cref="T:System.IO.FileStream" /> objects.</returns>
      <param name="getResourceModules">true to include resource modules; otherwise, false. </param>
      <exception cref="T:System.IO.FileLoadException">A file that was found could not be loaded. </exception>
      <exception cref="T:System.IO.FileNotFoundException">A file was not found. </exception>
      <exception cref="T:System.BadImageFormatException">A file was not a valid assembly. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Reflection.Assembly.GetLoadedModules">
      <summary>Gets all the loaded modules that are part of this assembly.</summary>
      <returns>An array of modules.</returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetLoadedModules(System.Boolean)">
      <summary>Gets all the loaded modules that are part of this assembly, specifying whether to include resource modules.</summary>
      <returns>An array of modules.</returns>
      <param name="getResourceModules">true to include resource modules; otherwise, false. </param>
    </member>
    <member name="M:System.Reflection.Assembly.GetManifestResourceInfo(System.String)">
      <summary>Returns information about how the given resource has been persisted.</summary>
      <returns>
        <see cref="T:System.Reflection.ManifestResourceInfo" /> populated with information about the resource's topology, or null if the resource is not found.</returns>
      <param name="resourceName">The case-sensitive name of the resource. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="resourceName" /> is null. </exception>
      <exception cref="T:System.ArgumentException">The <paramref name="resourceName" /> parameter is an empty string (""). </exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetManifestResourceNames">
      <summary>Returns the names of all the resources in this assembly.</summary>
      <returns>An array of type String containing the names of all the resources.</returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetManifestResourceStream(System.String)">
      <summary>Loads the specified manifest resource from this assembly.</summary>
      <returns>A <see cref="T:System.IO.Stream" /> representing the manifest resource; null if no resources were specified during compilation, or if the resource is not visible to the caller.</returns>
      <param name="name">The case-sensitive name of the manifest resource being requested. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null. </exception>
      <exception cref="T:System.ArgumentException">The <paramref name="name" /> parameter is an empty string (""). </exception>
      <exception cref="T:System.IO.FileLoadException">A file that was found could not be loaded. </exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="name" /> was not found. </exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="name" /> is not a valid assembly. </exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetManifestResourceStream(System.Type,System.String)">
      <summary>Loads the specified manifest resource, scoped by the namespace of the specified type, from this assembly.</summary>
      <returns>A <see cref="T:System.IO.Stream" /> representing the manifest resource; null if no resources were specified during compilation or if the resource is not visible to the caller.</returns>
      <param name="type">The type whose namespace is used to scope the manifest resource name. </param>
      <param name="name">The case-sensitive name of the manifest resource being requested. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null. </exception>
      <exception cref="T:System.ArgumentException">The <paramref name="name" /> parameter is an empty string (""). </exception>
      <exception cref="T:System.IO.FileLoadException">A file that was found could not be loaded. </exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="name" /> was not found. </exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="name" /> is not a valid assembly. </exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetModule(System.String)">
      <summary>Gets the specified module in this assembly.</summary>
      <returns>The module being requested, or null if the module is not found.</returns>
      <param name="name">The name of the module being requested. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null. </exception>
      <exception cref="T:System.ArgumentException">The <paramref name="name" /> parameter is an empty string (""). </exception>
      <exception cref="T:System.IO.FileLoadException">A file that was found could not be loaded. </exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="name" /> was not found. </exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="name" /> is not a valid assembly. </exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetModules">
      <summary>Gets all the modules that are part of this assembly.</summary>
      <returns>An array of modules.</returns>
      <exception cref="T:System.IO.FileNotFoundException">The module to be loaded does not specify a file name extension. </exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetModules(System.Boolean)">
      <summary>Gets all the modules that are part of this assembly, specifying whether to include resource modules.</summary>
      <returns>An array of modules.</returns>
      <param name="getResourceModules">true to include resource modules; otherwise, false. </param>
    </member>
    <member name="M:System.Reflection.Assembly.GetName">
      <summary>Gets an <see cref="T:System.Reflection.AssemblyName" /> for this assembly.</summary>
      <returns>An <see cref="T:System.Reflection.AssemblyName" /> for this assembly.</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Reflection.Assembly.GetName(System.Boolean)">
      <summary>Gets an <see cref="T:System.Reflection.AssemblyName" /> for this assembly, setting the codebase as specified by <paramref name="copiedName" />.</summary>
      <returns>An <see cref="T:System.Reflection.AssemblyName" /> for this assembly.</returns>
      <param name="copiedName">true to set the <see cref="P:System.Reflection.Assembly.CodeBase" /> to the location of the assembly after it was shadow copied; false to set <see cref="P:System.Reflection.Assembly.CodeBase" /> to the original location. </param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Reflection.Assembly.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Gets serialization information with all of the data needed to reinstantiate this assembly.</summary>
      <param name="info">The object to be populated with serialization information. </param>
      <param name="context">The destination context of the serialization. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is null. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter" />
      </PermissionSet>
    </member>
    <member name="M:System.Reflection.Assembly.GetReferencedAssemblies">
      <summary>Gets the <see cref="T:System.Reflection.AssemblyName" /> objects for all the assemblies referenced by this assembly.</summary>
      <returns>An array of type <see cref="T:System.Reflection.AssemblyName" /> containing all the assemblies referenced by this assembly.</returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetSatelliteAssembly(System.Globalization.CultureInfo)">
      <summary>Gets the satellite assembly for the specified culture.</summary>
      <returns>The specified satellite assembly.</returns>
      <param name="culture">The specified culture. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> is null. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The assembly cannot be found. </exception>
      <exception cref="T:System.IO.FileLoadException">The satellite assembly with a matching file name was found, but the CultureInfo did not match the one specified. </exception>
      <exception cref="T:System.BadImageFormatException">The satellite assembly is not a valid assembly. </exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetSatelliteAssembly(System.Globalization.CultureInfo,System.Version)">
      <summary>Gets the specified version of the satellite assembly for the specified culture.</summary>
      <returns>The specified satellite assembly.</returns>
      <param name="culture">The specified culture. </param>
      <param name="version">The version of the satellite assembly. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> is null. </exception>
      <exception cref="T:System.IO.FileLoadException">The satellite assembly with a matching file name was found, but the CultureInfo or the version did not match the one specified. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The assembly cannot be found. </exception>
      <exception cref="T:System.BadImageFormatException">The satellite assembly is not a valid assembly. </exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetType(System.String)">
      <summary>Gets the <see cref="T:System.Type" /> object with the specified name in the assembly instance.</summary>
      <returns>A <see cref="T:System.Type" /> object that represents the specified class, or null if th