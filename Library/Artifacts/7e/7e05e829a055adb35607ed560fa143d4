rue,
                supportSubsurfaceScattering = true,
                sssSampleBudget = new IntScalableSetting(new[] { (int)DefaultSssSampleBudgetForQualityLevel.Low,
                                                                 (int)DefaultSssSampleBudgetForQualityLevel.Medium,
                                                                 (int)DefaultSssSampleBudgetForQualityLevel.High }, ScalableSettingSchemaId.With3Levels),
                supportVolumetrics = true,
                supportDistortion = true,
                supportTransparentBackface = true,
                supportTransparentDepthPrepass = true,
                supportTransparentDepthPostpass = true,
                colorBufferFormat = ColorBufferFormat.R11G11B10,
                supportCustomPass = true,
                customBufferFormat = CustomBufferFormat.R8G8B8A8,
                supportedLitShaderMode = SupportedLitShaderMode.DeferredOnly,
                supportDecals = true,
                supportDecalLayers = false,
                supportSurfaceGradient = true,
                decalNormalBufferHP = false,
                msaaSampleCount = MSAASamples.None,
                supportMotionVectors = true,
                supportRuntimeAOVAPI = false,
                supportDitheringCrossFade = true,
                supportTerrainHole = false,
                planarReflectionResolution = new PlanarReflectionAtlasResolutionScalableSetting(new[] { PlanarReflectionAtlasResolution.Resolution256,
                                                                                                        PlanarReflectionAtlasResolution.Resolution1024,
                                                                                                        PlanarReflectionAtlasResolution.Resolution2048 },
                    ScalableSettingSchemaId.With3Levels),
                lightLoopSettings = GlobalLightLoopSettings.NewDefault(),
                hdShadowInitParams = HDShadowInitParameters.NewDefault(),
                decalSettings = GlobalDecalSettings.NewDefault(),
                postProcessSettings = GlobalPostProcessSettings.NewDefault(),
                dynamicResolutionSettings = GlobalDynamicResolutionSettings.NewDefault(),
                lowresTransparentSettings = GlobalLowResolutionTransparencySettings.NewDefault(),
                xrSettings = GlobalXRSettings.NewDefault(),
                postProcessQualitySettings = GlobalPostProcessingQualitySettings.NewDefault(),
                lightingQualitySettings = GlobalLightingQualitySettings.NewDefault(),
                lightSettings = LightSettings.NewDefault(),

                supportRayTracing = false,
                supportedRayTracingMode = SupportedRayTracingMode.Both,
                lodBias = new FloatScalableSetting(new[] { 1.0f, 1, 1 }, ScalableSettingSchemaId.With3Levels),
                maximumLODLevel = new IntScalableSetting(new[] { 0, 0, 0 }, ScalableSettingSchemaId.With3Levels),
                supportProbeVolume = false,
                probeVolumeMemoryBudget = ProbeVolumeTextureMemoryBudget.MemoryBudgetMedium,
                probeVolumeSHBands = ProbeVolumeSHBands.SphericalHarmonicsL1,
            };
            return settings;
        }

        /// <summary>
        /// Light Settings.
        /// </summary>
        [Serializable]
        public struct LightSettings
        {
            /// <summary>Enable contact shadows.</summary>
            public BoolScalableSetting useContactShadow;

            internal static LightSettings NewDefault() => new LightSettings()
            {
                useContactShadow = new BoolScalableSetting(new[] { false, false, true }, ScalableSettingSchemaId.With3Levels)
            };
        }


        /// <summary>
        /// Represents resolution settings for planar reflections.
        /// </summary>
        [Serializable]
        public class PlanarReflectionAtlasResolutionScalableSetting : ScalableSetting<PlanarReflectionAtlasResolution>
        {
            /// <summary>
            /// Instantiate a new PlanarReflectionAtlasResolution scalable setting.
            /// </summary>
            /// <param name="values">The values of the settings</param>
            /// <param name="schemaId">The schema of the setting.</param>
            public PlanarReflectionAtlasResolutionScalableSetting(PlanarReflectionAtlasResolution[] values, ScalableSettingSchemaId schemaId)
                : base(values, schemaId)
            {
            }
        }

        // Lighting
        /// <summary>Support shadow masks.</summary>
        public bool supportShadowMask;
        /// <summary>Support screen space reflections.</summary>
        public bool supportSSR;
        /// <summary>Support transparent screen space reflections.</summary>
        public bool supportSSRTransparent;
        /// <summary>Support screen space ambient occlusion.</summary>
        public bool supportSSAO;
        /// <summary>Support screen space global illumination.</summary>
        public bool supportSSGI;
        /// <summary>Support subsurface scattering.</summary>
        public bool supportSubsurfaceScattering;
        /// <summary>Sample budget for the Subsurface Scattering algorithm.</summary>
        public IntScalableSetting sssSampleBudget;
        /// <summary>Support volumetric lighting.</summary>
        public bool supportVolumetrics;
        /// <summary>Support volumetric clouds.</summary>
        public bool supportVolumetricClouds;
        /// <summary>Support light layers.</summary>
        public bool supportLightLayers;
        /// <summary>Name for light layer 0.</summary>
        public string lightLayerName0
        {
            get { return HDRenderPipelineGlobalSettings.instance.lightLayerName0; }
            set { HDRenderPipelineGlobalSettings.instance.lightLayerName0 = value; }
        }
        /// <summary>Name for light layer 1.</summary>
        public string lightLayerName1
        {
            get { return HDRenderPipelineGlobalSettings.instance.lightLayerName1; }
            set { HDRenderPipelineGlobalSettings.instance.lightLayerName1 = value; }
        }
        /// <summary>Name for light layer 2.</summary>
        public string lightLayerName2
        {
            get { return HDRenderPipelineGlobalSettings.instance.lightLayerName2; }
            set { HDRenderPipelineGlobalSettings.instance.lightLayerName2 = value; }
        }
        /// <summary>Name for light layer 3.</summary>
        public string lightLayerName3
        {
            get { return HDRenderPipelineGlobalSettings.instance.lightLayerName3; }
            set { HDRenderPipelineGlobalSettings.instance.lightLayerName3 = value; }
        }
        /// <summary>Name for light layer 4.</summary>
        public string lightLayerName4
        {
            get { return HDRenderPipelineGlobalSettings.instance.lightLayerName4; }
            set { HDRenderPipelineGlobalSettings.instance.lightLayerName4 = value; }
        }
        /// <summary>Name for light layer 5.</summary>
        public string lightLayerName5
        {
            get { return HDRenderPipelineGlobalSettings.instance.lightLayerName5; }
            set { HDRenderPipelineGlobalSettings.instance.lightLayerName5 = value; }
        }
        /// <summary>Name for light layer 6.</summary>
        public string lightLayerName6
        {
            get { return HDRenderPipelineGlobalSettings.instance.lightLayerName6; }
            set { HDRenderPipelineGlobalSettings.instance.lightLayerName6 = value; }
        }
        /// <summary>Name for light layer 7.</summary>
        public string lightLayerName7
        {
            get { return HDRenderPipelineGlobalSettings.instance.lightLayerName7; }
            set { HDRenderPipelineGlobalSettings.instance.lightLayerName7 = value; }
        }
        /// <summary>Support distortion.</summary>
        public bool supportDistortion;
        /// <summary>Support transparent backface pass.</summary>
        public bool supportTransparentBackface;
        /// <summary>Support transparent depth pre-pass.</summary>
        public bool supportTransparentDepthPrepass;
        /// <summary>Support transparent depth post-pass.</summary>
        public bool supportTransparentDepthPostpass;
        /// <summary>Color buffer format.</summary>
        public ColorBufferFormat colorBufferFormat;
        /// <summary>Support custom passes.</summary>
        public bool supportCustomPass;
        /// <summary>Custom passes buffer format.</summary>
        public CustomBufferFormat customBufferFormat;
        /// <summary>Supported Lit shader modes.</summary>
        public SupportedLitShaderMode supportedLitShaderMode;
        /// <summary></summary>
        public PlanarReflectionAtlasResolutionScalableSetting planarReflectionResolution;
        // Engine
        /// <summary>Support decals.</summary>
        public bool supportDecals;
        /// <summary>Support decal Layers.</summary>
        public bool supportDecalLayers;
        /// <summary>Support surface gradient for decal normal blending.</summary>
        public bool supportSurfaceGradient;
        /// <summary>High precision normal buffer.</summary>
        public bool decalNormalBufferHP;
        /// <summary>Name for decal layer 0.</summary>
        public string decalLayerName0
        {
            get { return HDRenderPipelineGlobalSettings.instance.decalLayerName0; }
            set { HDRenderPipelineGlobalSettings.instance.decalLayerName0 = value; }
        }
        /// <summary>Name for decal layer 1.</summary>
        public string decalLayerName1
        {
            get { return HDRenderPipelineGlobalSettings.instance.decalLayerName1; }
            set { HDRenderPipelineGlobalSettings.instance.decalLayerName1 = value; }
        }
        /// <summary>Name for decal layer 2.</summary>
        public string decalLayerName2
        {
            get { return HDRenderPipelineGlobalSettings.instance.decalLayerName2; }
            set { HDRenderPipelineGlobalSettings.instance.decalLayerName2 = value; }
        }
        /// <summary>Name for decal layer 3.</summary>
        public string decalLayerName3
        {
            get { return HDRenderPipelineGlobalSettings.instance.decalLayerName3; }
            set { HDRenderPipelineGlobalSettings.instance.decalLayerName3 = value; }
        }
        /// <summary>Name for decal layer 4.</summary>
        public string decalLayerName4
        {
            get { return HDRenderPipelineGlobalSettings.instance.decalLayerName4; }
            set { HDRenderPipelineGlobalSettings.instance.decalLayerName4 = value; }
        }
        /// <summary>Name for decal layer 5.</summary>
        public string decalLayerName5
        {
            get { return HDRenderPipelineGlobalSettings.instance.decalLayerName5; }
            set { HDRenderPipelineGlobalSettings.instance.decalLayerName5 = value; }
        }
        /// <summary>Name for decal layer 6.</summary>
        public string decalLayerName6
        {
            get { return HDRenderPipelineGlobalSettings.instance.decalLayerName6; }
            set { HDRenderPipelineGlobalSettings.instance.decalLayerName6 = value; }
        }
        /// <summary>Name for decal layer 7.</summary>
        public string decalLayerName7
        {
            get { return HDRenderPipelineGlobalSettings.instance.decalLayerName7; }
            set { HDRenderPipelineGlobalSettings.instance.decalLayerName7 = value; }
        }

        /// <summary>Default Number of samples when using MSAA.</summary>
        public MSAASamples msaaSampleCount;
        /// <summary>Support MSAA.</summary>
        [Obsolete]
        public bool supportMSAA => msaaSampleCount != MSAASamples.None;

        // Returns true if the output of the rendering passes support an alpha channel
        internal bool SupportsAlpha()
        {
            return CoreUtils.IsSceneFilteringEnabled() || (colorBufferFormat == ColorBufferFormat.R16G16B16A16);
        }

        /// <summary>Support motion vectors.</summary>
        public bool supportMotionVectors;

        /// <summary>Support runtime debug display.</summary>
        public bool supportRuntimeDebugDisplay
        {
            get => HDRenderPipelineGlobalSettings.instance.supportRuntimeDebugDisplay;
            set => HDRenderPipelineGlobalSettings.instance.supportRuntimeDebugDisplay = value;
        }
        /// <summary>Support runtime AOV API.</summary>
        public bool supportRuntimeAOVAPI;
        /// <summary>Support dithered cross-fade.</summary>
        public bool supportDitheri